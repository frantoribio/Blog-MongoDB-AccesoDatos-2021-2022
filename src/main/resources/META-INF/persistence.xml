<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd"
             version="2.2">

    <!-- Nombre de la unidad de persistencia -->
    <persistence-unit name="default" transaction-type="JTA">
        <description>Ejemplo Blog Hibernate JPA</description>

        <!-- Indicamos el “provider” que es la implementación de JPA que estamos usando.
       En nuestro ejemplo hibernate, pero existen otros proveedores como EclipseLink: -->
        <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>

        <!-- Definiremos las clases que representan “entidades”. Por cada clase
   debemos utilizar la etiqueta <class> cuyo contenido debe incluir el paquete y el
   nombre de la clase: -->

        <class>es.joseluisgs.dam.blog.dao.Category</class>
        <class>es.joseluisgs.dam.blog.dao.User</class>
        <class>es.joseluisgs.dam.blog.dao.Login</class>
        <class>es.joseluisgs.dam.blog.dao.Post</class>
        <class>es.joseluisgs.dam.blog.dao.Comment</class>

        <!-- Añadimos las propiedades de conexión a la base de datos MySQL -->
        <properties>
            <property name="hibernate.ogm.datastore.provider" value="mongodb" />
            <property name="hibernate.ogm.datastore.database" value="blog" />
            <property name="hibernate.ogm.datastore.host" value="127.0.0.1" />
            <property name="hibernate.ogm.datastore.port" value="27017" />
            <property name="hibernate.ogm.datastore.username" value="mongoadmin" />
            <property name="hibernate.ogm.datastore.password" value="mongopass" />
            <property name="hibernate.ogm.datastore.create_database" value="true" />
            <!-- Para ver las consultas
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>  -->
            <!-- Para trabajar con el esquema
               validate: validate the schema, makes no changes to the database.
               update: update the schema si detecta cambios.
               create: creates the schema, destroying previous data.
               create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
               none: does nothing with the schema, makes no changes to the database-->
        </properties>
    </persistence-unit>
</persistence>
